diff -uNr linux-3.13/include/generated/compile.h linux-3.13_kvats/include/generated/compile.h
--- linux-3.13/include/generated/compile.h	2018-02-11 17:01:09.266284000 +0530
+++ linux-3.13_kvats/include/generated/compile.h	2018-02-15 22:13:41.724509999 +0530
@@ -1,7 +1,7 @@
-/* This file is auto generated, version 14 */
+/* This file is auto generated, version 23 */
 /* SMP */
 #define UTS_MACHINE "x86_64"
-#define UTS_VERSION "#14 SMP Sun Feb 11 15:16:54 IST 2018"
+#define UTS_VERSION "#23 SMP Thu Feb 15 22:02:04 IST 2018"
 #define LINUX_COMPILE_BY "root"
 #define LINUX_COMPILE_HOST "Alienware"
 #define LINUX_COMPILER "gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3) "
diff -uNr linux-3.13/kernel/sys.c linux-3.13_kvats/kernel/sys.c
--- linux-3.13/kernel/sys.c	2018-02-11 17:01:09.338284000 +0530
+++ linux-3.13_kvats/kernel/sys.c	2018-02-15 22:13:43.649471990 +0530
@@ -96,6 +96,9 @@
 # define SET_TSC_CTL(a)		(-EINVAL)
 #endif
 
+// Reference for implementing syscall:- Liu Yutao Blog.
+// ytliu.info/notes/linux/file_ops_in_kernel.html
+
 /*
  * this is where the system-wide overflow UID and GID are defined, for
  * architectures that now have 32-bit UID/GID but didn't in the past
@@ -169,97 +172,160 @@
 	int retval = 0;
 	struct pid *pid_object;
 	struct task_struct *task_object;
-	struct file *file;
 	
 	pid_object = find_get_pid(pid);
 	if ( pid_object == NULL )
 	{
 		printk("Null Pointer Error, Wrong Pid\n");
-		// write(1,"Null Pointer Error, Wrong Pid\n", 30);
-		// print("Null Pointer Error, Wrong Pid\n");
 		retval = -ESRCH;
 		printk("Error no: %d\n", retval);
-		printk("No Such Process\n");
-		// print("Error no: %d\n", retval);
-		// print("No such process\n");
+		printk("No Such Process");
 		goto out;
 	} 
 	task_object = pid_task(pid_object, PIDTYPE_PID);
 	printk("Name: %s\n" , task_object->comm);
 	printk("Pid: %ld\n", task_object->pid);
-	// print("Name: %s\n", task_object->comm);
-	// print("Pid: %ld\n", task_object->pid);
+
  	if ( pid > 0 )
 	{ 
 		printk("Parent Name: %s\n", task_object->parent->comm);
-		// print("Parent Name: %s\n", task_object->parent->comm);
 		printk("Parent Pid: %ld\n", task_object->parent->pid);
-		// print("Parent Pid: %ld\n", task_object->parent->pid);
 	}
 	else 
 	{
 		retval = -ESRCH;
 		printk("No Parent Process\n");
-		// print("No Parent Process\n");
 		goto out;
 	}
 
 	printk("State: %ld\n", task_object->state);
-	// print("State: %ld\n", task_object->state);
 	printk("Priority: %ld\n", task_object->prio);
-	// print("Priority: %ld\n", task_object->prio);
 
 	int fd;
-	loff_t p = 0;
 	mm_segment_t old_fs = get_fs();
 	set_fs(KERNEL_DS);
 	fd = sys_open(file_name, O_WRONLY | O_CREAT | O_TRUNC, 0644);
 
 	if ( fd >= 0 )
 	{
-		sys_write(fd, task_object->comm, strlen(task_object->comm));
-		file = fget(fd);
-		if (file)
-		{
-			// vfs_write(file, task_object->comm, strlen(task_object->comm), &p);
-			char brr[1024];
-			int Len = sprintf(brr, "Name: %s\n", task_object->comm);
-			vfs_write(file, brr, Len, &p);
-			Len = sprintf(brr, "PID: [%ld]\n", task_object->pid);
-			vfs_write(file, brr, Len, &p);
-			if ( pid > 0 )
-			{ 
-				Len = sprintf(brr, "Parent Name: %s\n", task_object->parent->comm);
-				vfs_write(file, brr, Len, &p);
-			}
-			else
-			{
-				Len = sprintf(brr, "No Parent Process\n");
-				vfs_write(file, brr, Len, &p);
-				retval = -ESRCH;
-				printk("No such process\n");
-				goto out;
-			}
-			Len = sprintf(brr, "Parent PID: [%ld]\n", task_object->parent->pid);
-			vfs_write(file, brr, Len, &p);
-			Len = sprintf(brr, "State: %ld\n", task_object->state);
-			vfs_write(file, brr, Len, &p);
-			Len = sprintf(brr, "Priority: %ld\n", task_object->prio);
-			vfs_write(file, brr, Len, &p);
-			
-			fput(file);
+		char brr[1024];
+		int Len = sprintf(brr, "Name: %s\n", task_object->comm);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "PID: [%ld]\n", task_object->pid);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "TGID: [%ld]\n", task_object->tgid);
+		sys_write(fd, brr, Len);
+		
+
+		if ( pid > 0 )
+		{ 
+			Len = sprintf(brr, "Parent Name: %s\n", task_object->parent->comm);
+			sys_write(fd, brr, Len);
 		}
 		else
 		{
-			retval = -ENOENT;
+			Len = sprintf(brr, "No Parent Process\n");
+			sys_write(fd, brr, Len);
+			retval = -ESRCH;
+			printk("No such process\n");
+			goto out;
 		}
+		Len = sprintf(brr, "Parent PID: [%ld]\n", task_object->parent->pid);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "State: %ld\n", task_object->state);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Prio: %d\n", task_object->prio);
+		sys_write(fd, brr, Len);
+	
+		Len = sprintf(brr, "Static_Prio: %d\n", task_object->static_prio);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Normal_Prio: %d\n", task_object->normal_prio);
+		sys_write(fd, brr, Len);
+		
+		Len = sprintf(brr, "Rt_Priority: %u\n", task_object->rt_priority);
+		sys_write(fd, brr, Len);
+		
+		Len = sprintf(brr, "On_cpu: %d\n", task_object->on_cpu);
+		sys_write(fd, brr, Len);
+		
+		// Sched_Entity
+		struct sched_entity abc  = (struct sched_entity)task_object->se;
+		Len = sprintf(brr, "Sched_entity->on_rq: %u\n", (unsigned int)abc.on_rq);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Sched_entity->exec_start: %llu\n", abc.exec_start);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Sched_entity->sum_exec_runtime: %llu\n", abc.sum_exec_runtime);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Sched_entity->vruntime %llu\n", abc.vruntime);
+		sys_write(fd, brr, Len);
+		
+		Len = sprintf(brr, "Sched_entity->prev_sum_exec_runtime %llu\n", abc.prev_sum_exec_runtime);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Sched_entity->nr_migrations %llu\n", abc.nr_migrations);
+		sys_write(fd, brr, Len);
+
+		// Thread_struct
+		struct thread_struct cba = (struct thread_struct)task_object->thread;
+		Len = sprintf(brr, "Thread_struct->sp0 %lu\n", (unsigned long)cba.sp0);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Thread_struct->sp %lu\n", (unsigned long)cba.sp);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Thread_struct->error_code %lu\n", (unsigned long)cba.error_code);
+		sys_write(fd, brr, Len);
+
+		Len = sprintf(brr, "Thread_struct->fpu_counter: %u\n", (unsigned int)cba.fpu_counter);
+		sys_write(fd, brr, Len);
+
+		// Blocked sigset_t
+		sigset_t sblock = task_object->blocked;
+		//unsigned long *p = sblock.sig;
+		int i=0;
+		Len = sprintf(brr, "Blocked: \n");
+		sys_write(fd, brr, Len);
+		
+		for(i=0; i < sizeof(sblock.sig)/sizeof(sblock.sig[0]); i++)
+		{
+			Len = sprintf(brr, "[%d] -->  %lu\n", i, sblock.sig[i]);
+			sys_write(fd, brr, Len);
+		}
+
+
+		// Real_blocked
+		sigset_t sreal = task_object->real_blocked;
+		//unsigned long *q = sreal.sig;
+		int j = 0;
+		Len = sprintf(brr, "Real_blocked: \n");
+		sys_write(fd, brr, Len);
+
+		for(j=0; j < sizeof(sreal.sig)/sizeof(sreal.sig[0]); j++)
+		{
+			Len = sprintf(brr, "[%d] -->  %lu\n", j, sreal.sig[j]);
+			sys_write(fd, brr, Len);
+		}
+		
+		//for ( int qw = 0; qw < sizeof(sreal.sig); qw++ )
+		//{
+		//	Len = sprintf(brr, "%lu\n", sreal.sig[qw]);
+		//	sys_write(fd, brr, Len);
+		//} 
+		
+
 	}
 	else
 	{
 		printk("Error Related to File Name: %s\n",file_name);
-		// print("Error Related to File Name: %s\n",file_name);
 		printk("Invalid argument\n");
-		// print("Invalid argument\n");
 		retval = -EINVAL;
 	}
 	sys_close(fd);
Binary files linux-3.13/scripts/asn1_compiler and linux-3.13_kvats/scripts/asn1_compiler differ
Binary files linux-3.13/scripts/basic/fixdep and linux-3.13_kvats/scripts/basic/fixdep differ
Binary files linux-3.13/scripts/conmakehash and linux-3.13_kvats/scripts/conmakehash differ
Binary files linux-3.13/scripts/genksyms/genksyms and linux-3.13_kvats/scripts/genksyms/genksyms differ
Binary files linux-3.13/scripts/kallsyms and linux-3.13_kvats/scripts/kallsyms differ
Binary files linux-3.13/scripts/kconfig/conf and linux-3.13_kvats/scripts/kconfig/conf differ
Binary files linux-3.13/scripts/kconfig/mconf and linux-3.13_kvats/scripts/kconfig/mconf differ
Binary files linux-3.13/scripts/mod/mk_elfconfig and linux-3.13_kvats/scripts/mod/mk_elfconfig differ
Binary files linux-3.13/scripts/mod/modpost and linux-3.13_kvats/scripts/mod/modpost differ
Binary files linux-3.13/scripts/recordmcount and linux-3.13_kvats/scripts/recordmcount differ
Binary files linux-3.13/scripts/selinux/genheaders/genheaders and linux-3.13_kvats/scripts/selinux/genheaders/genheaders differ
Binary files linux-3.13/scripts/selinux/mdp/mdp and linux-3.13_kvats/scripts/selinux/mdp/mdp differ
Binary files linux-3.13/scripts/sortextable and linux-3.13_kvats/scripts/sortextable differ
Binary files linux-3.13/signing_key.x509 and linux-3.13_kvats/signing_key.x509 differ
diff -uNr linux-3.13/.version linux-3.13_kvats/.version
--- linux-3.13/.version	2018-02-11 17:01:09.446284000 +0530
+++ linux-3.13_kvats/.version	2018-02-15 22:13:23.191247999 +0530
@@ -1 +1 @@
-14
+23
